/*
 * doxypages.h
 *
 *  Created on: 8 марта 2016 г.
 *      Author: lladmin
 */
/**
* \page Russian_doc
*# Описание программной библиотеки Forest Facotry #
*
*## Общая информаци ##
*
*Проект имеет расширяемую объектно-ориентированную структуру. Каждый компонент может быть модифицирован с минимальными затратами средствами языка C\+\+. Для обеспечения наибольшей гибкости в использовании памяти библиотека исползьует стандарт C\+\+11. Для осуществления векторых и матричных расчётов используется библиотека Eigen версии 3.
*
*Все средства библиотеки находятся в пространстве имён ffactory. Все объекты не являющиеся контейнерами являются потомками класса Base.
*
*## Контейнеры ##
*
*- Sample
*- Dataset
*- DataRanges
*- Attribute
*- Prediction
*
*
*## Абстрактный классификатор ##
*Любой классификатор данной библиотеки наследуется от класса BaseClassifier. Этот класс приводит унифицированный интерфейс в который входят следующие методы:
*
*- train
*- predict
*- test
*
*Стандартный код использования классификатора может быть такой:
*
*		# load dataset from file
*            Dataset d;
*        	CsvFileReader r;
*			r.setDataset(&d);
*			r.setFilename("test.csv");
*			r.setDelimiter(';');
*			r.read();
*        # train and test classifier
*        # BaseTree is derived from BaseClassifier)
*            BaseTree tree;
*            tree.train(&d);
*            std::cout <<"Train accuracy: "<< tree.test(&d) << etd::endl;
*
*### Attribute ###
*
*Три типа атрибутов
*- ATTR_CONTINUOUS,
*- ATTR_INTEGER,
*- ATTR_CATEGORIAL
*
*которые означают, соответственно, непрерывные, целые или категориальные переменные.
*
*### DataRanges ###
*
*Используется для работы с границами разбиений.
*Класс используется в PartitioinStatistics.
*В случае непрерывной переменной хранятся границы в которых находятся целевые точки. Если же переменная категориальная, то если нужно указать значение, то верхняя и нижняя граница выставляется в требуемое значение.
*
*### Dataset ###
*
*Хранит в себе весь набор данных и его описание. Описание каждого из признаков и целевой переменной хранится в виде массива Attibute.
*При использовании отдельно, без считывания набора данных из файла, требуется задать размерности признакового пространства (**setNumFeatures**) и количество классов (**setNumClasses**), затем инициализировать внутренние структуры класса c с помощью Init. После этого можно добавлять точки.
*
*### PartitionStatistics ###
*
*Вспомогательный класс, который содержит информацию о точках в заданной области пространства признаков. Такую как их количество, распределение по классам.
*
*## Операции с данными ##
*
*Пакет содержит унифицированные классы для работы с данными. Частично поддерживаются популярные форматы данных, такие как CSV и ARFF.
*
*## Классификаторы ##
*Абстрактный класс BaseClassifier
*
*### Ансамбли классификаторов ###
*Абстрактный класс BaseEnsembleClassifier
*
*### Деревья решений ###
*Все классификаторы принадлежат к абстрактному классу BaseTree.
*В настоящий момент поддерживаются только аксиально-параллельные разбиения.
*
*#### Генератор кандидатов на разбиение ####
*Абстрактный класс **BaseSplitCandidateGenerator**
*
*#### Измеритель качества разбиения ####
*Абстрактный класс **BaseSplitQualityMeasurer**
*
*#### BinarySplit ####
*Этот класс используется для разбиении пространства признаков, он содержит в себе номер атрибута(признака) по которому происходит разбиение, его тип, значение и также качество.
*
*## Соглашения ##
*
*	Любой класс имеет декларации для умных указателей на него. Для этого достаточно дописать соответствующий префикс.
*	Например, DataVectorUniquePtr это std::unique_ptr < DataVector >.
*	Для этого используется макрос DEFINE_PTR(CLASSNAME).
*
*/
